
Tasks - Mathías:
    Recordar para mañana DCD y Diagramas de c- Falta agregar todos los DataTypes

    Modificaciones:
    IUsuario
        1) cambié tipo de parámetro de listadoUsuarios(string) a listadoUsuarios(tipo)
        2) a la operación virtual set<DTComentario> listadoComentarioUsuario(string) = 0; 
            deberiamos quitarle la palabra Usuario en el nombre de la operación, o asegurarnos de ponerselo en DCD y Diagrama de comuniación 
        3) agregué operación virtual set<DTUsuario> listadoUsuarios() = 0; sin parámetro para usar en Casos de Uso Suscribirse a Notificaciones, 
            Consulta de Notificaciones y Eliminar Suscripciones.
        

    CUsuario
        1) agregé #include <map>
        2) Consulta: map<string, Usuario *> usuarios; entonces el nickname del usuario es su key?
        3) set<string> listadoUsuarios(tipo tipodeusuario); no existe esta operación en IUsuario ni en DCD
            en DCD y en IUsuario existe la operación set<DTUsuario> listadoUsuarios(tipo), aunque en DCD aparece como listadoUsuarios(string).
            De todos modos, las siguientes dos operaciones están una retornando un set de nicknames de clientes y la otra un set de nickname de usuarios
        4) agregué la operación set<DTUsuario> listadoUsuarios();
        5) me parece que en vez de poner los 3 atributos memNickname, etc. debería de ser un DTUsiario con esa info, para ser consistentes con el DCD.
        6) agrego ->second 


    datatypes.h
        1) modifiqué los desrutructores de las clases DTCliente y DTVendedor porque debían ser ~DTCliente() y ~DTVendedor()
        2) agregué #include "producto.h" y "compra_producto.h"
        3) en DTCompra corrijo parámetro donde aparece Com - Prod por Compra_Producto
        4) en la clase DTIdNProducto, por qué virtual en el destructor?
        5) DTUsuario, le agregaría el atributo tipo tipoUsuario.

    compra_producto.h
        1) agregué void a la operación agregarProd(Producto prod);
    
    compra.h
        1) corregí #include "compra-producto.h" por "compra_producto.h"
        2) agregué void a la operación agregarACompra(Producto prod, int id);

    notificacion.h
        1) agregué #include "producto.h"
        2) en la clase Notificacion, por qué virtual en el destructor?
    
    CNotificacion.h
        1) agrego #include "INotificacion.h"

    promocion.h
        1) eliminé el #include "usuario.h" pues no se usa en esta clase
        2) agregué #include "producto_promocion.h"
        3) Por qué definimos un puntero que apunta al set?   set<Producto_Promocion> *prodProms;
    
    usuario.h
        1) agregué atributo tipo tipoUsuario; para poder implementar su getter en usuario.cpp
        2) agregué destructor de clase usuario
        3) marque como op. abstractas puras a  listadoComentarioUsuario(), getDatosUsuario() y getComentarios().

    usuario.cpp
        1) Es clase abstracta, así que no deberíamos de implementar un método para sus operaciones ¿Right? Podría llegar a ser con los setters si, porque son comunes a ambas clases derivadas
            En caso afirmativo, tampoco debería de implementar getTipo()
        2) agregué atributo tipo tipoUsuario; para poder implementar su getter en usuario.cpp
        3) agregué destructor de clase usuario